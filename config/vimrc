set nocompatible
set smarttab
set nu

"if has('mouse')
"    set mouse-=a
"endif

" Format related
set lbr
set fo+=mB

" Indent related
set cin
set ai
set cino=:0g0t0(susj1
" For code style
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" Editing related
set backspace=indent,eol,start
set whichwrap=b,s,<,>,[,]
"set mouse=a
set mouse=v
set selectmode=
set mousemodel=popup
set keymodel=
set selection=inclusive

" Misc
set wildmenu

" Encoding related
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

" File type related
filetype plugin indent on

" Display related
set ru
set sm
set hls
colo wuye
set background=dark
syntax on


" alias
map <F3> <ESC>:e ++enc=cp936<RETURN>

" ============================================================================
" Plugins settings
" ============================================================================
" TList
let Tlist_Use_Right_Window=1
let Tlist_File_Fold_Auto_Close=1
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
let Tlist_Use_SingleClick=1
let Tlist_Auto_Open=0

" NERD_tree
map <F2> <ESC>:NERDTreeToggle<RETURN>

" A
let g:alternateNoDefaultAlternate=1

" fcitx-remote
let g:input_toggle = 1
function Fcitx2en() 
   let s:input_status = system("fcitx-remote")
   if s:input_status == 2
      let g:input_toggle = 1
      let l:a = system("fcitx-remote -c")
   endif
endfunction

function Fcitx2zh() 
   let s:input_status = system("fcitx-remote")
   if s:input_status != 2 && g:input_toggle == 1
      let l:a = system("fcitx-remote -o")
      let g:input_toggle = 0
   endif
endfunction

set timeoutlen=150
autocmd InsertLeave * call Fcitx2en()

if has("cscope") && filereadable("/usr/bin/cscope")
  set csprg=/usr/bin/cscope
  set csto=0
  set cst
  set nocsverb
  " add any database in current directory
  if filereadable("cscope.out")
     cs add cscope.out
     nmap <S-s> <Esc>:cs find s <cword> <Enter>
     nmap <S-c> <Esc>:cs find c <cword> <Enter>
  " else add database pointed to by environment
  elseif $CSCOPE_DB != ""
     cs add $CSCOPE_DB
  endif
  set csverb
endif

if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif 

" vundle
"set nocompatible               " be iMproved
filetype off                   " required!
 
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
 
" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'
 
" My Bundles here:
"
" original repos on github
"Bundle 'tpope/vim-fugitive'
"Bundle 'Lokaltog/vim-easymotion'
"Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
"Bundle 'tpope/vim-rails.git'
" vim-scripts repos
"Bundle 'L9'
"Bundle 'FuzzyFinder'
" non github repos
"Bundle 'git://git.wincent.com/command-t.git'
" ...
 
Bundle 'winmanager'
Bundle 'The-NERD-tree'

Bundle 'dyng/ctrlsf.vim'
"let g:ctrlsf_ackprg='ack'
"nmap     <C-F>f <Plug>CtrlSFPrompt
nmap     <C-F> :CtrlSF <C-R>=expand("<cword>")<CR><CR>
vmap     <C-F>f <Plug>CtrlSFVwordPath
vmap     <C-F>F <Plug>CtrlSFVwordExec
nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
nnoremap <C-F>o :CtrlSFOpen<CR>

Bundle 'https://github.com/Lokaltog/vim-powerline.git'
" vim-powerline
set laststatus=2
set t_Co=256
let g:Powerline_symbols = 'unicode'


filetype plugin indent on     " required!
"
" Brief help  -- 此处后面都是vundle的使用命令
" :BundleList          - list configured bundles
" :BundleInstall(!)    - install(update) bundles
" :BundleSearch(!) foo - search(or refresh cache first) for foo
" :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..


"###################    set file head start  #########################
"autocmd创建新文件自动调用setfilehead()函数
autocmd BufNewFile *.cpp,*.c,*.h,*.py exec ":call SetTitle()"
func Setfilehead()
    call append(0, '/*****************************************************************')
    call append(1, '#')
    call append(2, '#      Filename: '.expand("%"))
    call append(3, '#')
    call append(4, '#        Author: Li, Zhiyong - anonli@tencent.com')
    call append(5, '#   Description: ---')
    call append(6, '#        Create: '.strftime("%Y-%m-%d %H:%M:%S"))
    call append(7, '# Last Modified: '.strftime("%Y-%m-%d %H:%M:%S"))
    call append(8, '#')
    call append(9, '################################################')

    call append(10, '# Copyright (c) [1998-2018] tencent.com, Inc. All Rights Reserved')
    call append(11, '################################################')
    call append(12, '****************************************************************/')
"    call append(9, '')
endfunc

"定义函数SetTitle，自动插入文件头
func SetTitle()
    "如果文件类型为.sh文件
    if &filetype == 'sh' || &filetype == 'python'
        call append(0, '')
        call append(1, '##################################################################')
        call append(2, '#      Filename: '.expand("%"))
        call append(3, '#')
        call append(4, '#        Author: Li, Zhiyong - anonli@tencent.com')
        call append(5, '#   Description: ---')
        call append(6, '#        Create: '.strftime("%Y-%m-%d %H:%M:%S"))
        call append(7, '# Last Modified: '.strftime("%Y-%m-%d %H:%M:%S"))
        call append(8, '#')

        call append(10, '# Copyright (c) [1998-2018] tencent.com, Inc. All Rights Reserved')
        call append(11, '#################################################################')
    "    call append(9, '')
    else
        call append(line("."), '/********************************************************')
        call append(line(".")+1, ' ')
        call append(line(".")+2, '       Filename: '.expand("%"))
        call append(line(".")+3, ' ')
        call append(line(".")+4, '         Author: Li, Zhiyong - anonli@tencent.com')
        call append(line(".")+5, '    Description: ---')
        call append(line(".")+6, '         Create: '.strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".")+7, '  Last Modified: '.strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".")+8, ' ')

        call append(line(".")+9, '  Copyright (c) [1998-2018] tencent.com, Inc. All Rights Reserved')
        call append(line(".")+10, '')
        call append(line(".")+11, '********************************************************/')
    endif
    "如果为php文件，添加相应头和尾
    if &filetype == 'php'
        call append(0, "<?php")
        call append(line("$"), "?>")
    endif
    "如果为sh文件，添加相应的头
    if &filetype == 'sh'
        call append(0, "\#!/bin/bash")
        "如果为python文件，添加相应的头和编码设定
    elseif &filetype == 'python'
        call append(0, "\#!/usr/bin/env python2.7")
        call append(1, "\# -*- coding: utf-8 -*-")
    endif
endfunc

"map F2 to creat file head comment
"映射F2快捷键，生成后跳转至第10行，然后使用o进入vim的插入模式
map <F2> :call Setfilehead()<CR>:10<CR>o
"###################    set file head end   ##########################
"
""###################    set comment start  #########################
func SetComment()
    call append(line(".")  , '//**************** comment start ********************')
    call append(line(".")+1, '//**************** comment end   ********************')
endfunc

func SetPyDocString()
    call append(line(".")  , '      """ comment to fill """')
endfunc
"映射F11快捷键，生成后跳转至下行，然后使用O进入vim的插入模式
map <F10> :call SetPyDocString()<CR>j
"###################    set comment end   ##########################
